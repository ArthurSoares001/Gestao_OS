unit FormOS;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Constantes, Biblioteca, OS, OrObject,
  Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask, RxToolEdit, RxCurrEdit,
  frameformLabel, frameSalvaCancela, Vcl.ExtCtrls, Vcl.Grids, Vcl.Buttons,
  ClienteDB, TecnicoDB, StatusOSDB, PrioridadeOSDB, ProdutoDB, OrList, Cliente,
  Tecnico, StatusOS, PrioridadeOS, Produto, OSItem;

type
  TFrmOS = class(TForm)
    fraformLabel1: TfraformLabel;
    fraSalvaCancela1: TfraSalvaCancela;
    lblProdutos: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label2: TLabel;
    pnlPesquisar: TPanel;
    BtnPesquisar: TSpeedButton;
    lblFiltro: TLabel;
    Panel1: TPanel;
    SpeedButton1: TSpeedButton;
    pnlValores: TPanel;
    Label4: TLabel;
    Label1: TLabel;
    Label3: TLabel;
    Label7: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    lblLogin: TLabel;
    lblObservacao: TLabel;
    Label8: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    Label17: TLabel;
    StgServicos: TStringGrid;
    btnAdd: TBitBtn;
    btnRem: TBitBtn;
    Panel2: TPanel;
    SpeedButton2: TSpeedButton;
    TabSheet3: TTabSheet;
    CmbStatus: TComboBox;
    CmbPrioridade: TComboBox;
    CmbCliente: TComboBox;
    CmbTecnico: TComboBox;
    CmbServicos: TComboBox;
    EdtItens: TEdit;
    EdtValorSemDesconto: TEdit;
    EdtDesconto: TEdit;
    EdtValorComDesconto: TEdit;
    EdtQuantidade: TEdit;
    EdtTroco: TEdit;
    Label18: TLabel;
    StgProdutos: TStringGrid;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    Panel3: TPanel;
    SpeedButton3: TSpeedButton;
    CmbProdutos: TComboBox;
    lblValorContaPagar: TLabel;
    Label19: TLabel;
    Label20: TLabel;
    StgFormaPagto: TStringGrid;
    btnEdit: TBitBtn;
    CmbFormaPagto: TComboBox;
    EdtValorPagto: TEdit;
    BitBtn3: TBitBtn;
    BitBtn4: TBitBtn;
    EdtDataEntrada: TEdit;
    EdtDataSaida: TEdit;
    EdtNumOS: TEdit;
    EdtTitulo: TEdit;
    EdtDiagnostico: TEdit;
    EdtDataPrevConclusao: TEdit;
    EdtEndereco: TEdit;
    Edit3: TEdit;
    EdtVencimentoPagto: TEdit;
    MemoDescProblema: TMemo;
    MemoSolucaoAplic: TMemo;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure fraSalvaCancela1btnSalvarClick(Sender: TObject);
    procedure fraSalvaCancela1btnCancelarClick(Sender: TObject);
  private
    statusInterface: TStatusInterface;
    os: TOS;
    clienteDB: IClienteDB;
    tecnicoDB: ITecnicoDB;
    statusOSDB: IStatusOSDB;
    prioridadeOSDB: IPrioridadeOSDB;
    produtoDB: IProdutoDB;
    procedure setAtributos;
    procedure getAtributos;
    procedure atualizarInterface;
    procedure CarregarCombos;
    procedure PreencherCombo(ACombo: TComboBox; AList: TList; AType: string);
    procedure PreencherGridServicos;
    procedure PreencherGridProdutos;
    procedure InicializarGrids;
  public
    destructor Destroy; override;
    procedure setStatusInterface(statusInterface: TStatusInterface);
    procedure setOS(os: TOS);
    function getOS: TOS;
  end;

var
  FrmOS: TFrmOS;

implementation

uses
  DataModule, Filtro, ClientePostgreSQL, TecnicoPostgreSQL, StatusOSPostgreSQL,
  PrioridadeOSPostgreSQL, ProdutoPostgreSQL;

{$R *.dfm}

destructor TFrmOS.Destroy;
begin
  clienteDB := nil;
  tecnicoDB := nil;
  statusOSDB := nil;
  prioridadeOSDB := nil;
  produtoDB := nil;
  FreeAndNil(os);
  inherited Destroy;
end;

procedure TFrmOS.PreencherCombo(ACombo: TComboBox; AList: TList; AType: string);
var
  I: Integer;
  Obj: TOrObject;
  DisplayText: string;
begin
  ACombo.Clear;
  if Assigned(AList) and (AList.Count > 0) then
    for I := 0 to AList.Count - 1 do
    begin
      Obj := TOrObject(AList[I]);
      if AType = 'Cliente' then
        DisplayText := TCliente(Obj).getNomeRazao
      else if AType = 'Tecnico' then
        DisplayText := TTecnico(Obj).getNome
      else if AType = 'StatusOS' then
        DisplayText := TStatusOS(Obj).getCodigo
      else if AType = 'PrioridadeOS' then
        DisplayText := TPrioridadeOS(Obj).getCodigo
      else if AType = 'Produto' then
        DisplayText := TProduto(Obj).getDescricao
      else
        DisplayText := '';
      ACombo.Items.AddObject(DisplayText, Obj);
    end;
end;

procedure TFrmOS.CarregarCombos;
var
  ListaClientes, ListaTecnicos, ListaStatusOS, ListaPrioridadeOS, ListaServicos, ListaProdutos: TList;
  Filtro: TFiltro;
begin
  Filtro := TFiltro.Create;
  try
    // Carregar clientes
    ListaClientes := clienteDB.ProcurarTodos(Filtro, 0);
    // Carregar técnicos
    ListaTecnicos := tecnicoDB.ProcurarTodos(Filtro, 0);
    // Carregar status OS
    ListaStatusOS := statusOSDB.ProcurarTodos(Filtro, 0);
    // Carregar prioridades OS
    ListaPrioridadeOS := prioridadeOSDB.ProcurarTodos(Filtro, 0);
    // Carregar serviços (Tipo = 'S')
    Filtro.setTipo('S');
    ListaServicos := produtoDB.ProcurarTodos(Filtro, 0);
    // Carregar produtos (Tipo = 'P')
    Filtro.setTipo('P');
    ListaProdutos := produtoDB.ProcurarTodos(Filtro, 0);

    try
      PreencherCombo(CmbCliente, ListaClientes, 'Cliente');
      PreencherCombo(CmbTecnico, ListaTecnicos, 'Tecnico');
      PreencherCombo(CmbStatus, ListaStatusOS, 'StatusOS');
      PreencherCombo(CmbPrioridade, ListaPrioridadeOS, 'PrioridadeOS');
      PreencherCombo(CmbServicos, ListaServicos, 'Produto');
      PreencherCombo(CmbProdutos, ListaProdutos, 'Produto');
    finally
      ListaClientes.Free;
      ListaTecnicos.Free;
      ListaStatusOS.Free;
      ListaPrioridadeOS.Free;
      ListaServicos.Free;
      ListaProdutos.Free;
    end;
  finally
    Filtro.Free;
  end;
end;

procedure TFrmOS.InicializarGrids;
begin
  // Inicializar cabeçalhos para StgServicos
  StgServicos.RowCount := 1;
  StgServicos.ColCount := 4; // Descrição, Quantidade, Preço, Total
  StgServicos.Cells[0, 0] := 'Descrição';
  StgServicos.Cells[1, 0] := 'Quantidade';
  StgServicos.Cells[2, 0] := 'Preço';
  StgServicos.Cells[3, 0] := 'Total';

  // Inicializar cabeçalhos para StgProdutos
  StgProdutos.RowCount := 1;
  StgProdutos.ColCount := 4; // Mesmo exemplo
  StgProdutos.Cells[0, 0] := 'Descrição';
  StgProdutos.Cells[1, 0] := 'Quantidade';
  StgProdutos.Cells[2, 0] := 'Preço';
  StgProdutos.Cells[3, 0] := 'Total';
end;

procedure TFrmOS.PreencherGridServicos;
var
  Itens: TOrList;
  Item: TOSItem;
  I, Row: Integer;
  Produto: TProduto;
begin
  StgServicos.RowCount := 1; // Limpa o grid, mantendo o cabeçalho
  Itens := os.getLstOSItem as TOrList;
  if Assigned(Itens) then
  begin
    Row := 1;
    for I := 0 to Itens.contar - 1 do
    begin
      Item := (Itens.Item(I) as TOSItem); // Assumindo que TOrList tem a propriedade Items

      Produto := Item.getProduto as TProduto;
      if Assigned(Produto) and (Produto.getTipo = 'S') then
      begin
        StgServicos.RowCount := Row + 1;
        StgServicos.Cells[0, Row] := Produto.getDescricao;
        StgServicos.Cells[1, Row] := FormatFloat('0.00', Item.getQtde);
        StgServicos.Cells[2, Row] := FormatFloat('0.00', Item.getPrecoUnit);
        StgServicos.Cells[3, Row] := FormatFloat('0.00', Item.getQtde * Item.getPrecoUnit);
        Inc(Row);
      end;
    end;
  end;
end;

procedure TFrmOS.PreencherGridProdutos;
var
  Itens: TOrList;
  Item: TOSItem;
  I, Row: Integer;
  Produto: TProduto;
begin
  StgProdutos.RowCount := 1; // Limpa o grid, mantendo o cabeçalho
  Itens := os.getLstOSItem as TOrList;
  if Assigned(Itens) then
  begin
    Row := 1;
    for I := 0 to Itens.contar - 1 do
    begin
      Item := (Itens.Item(I) as TOSItem); // Assumindo que TOrList tem a propriedade Items
      Produto := Item.getProduto as TProduto;
      if Assigned(Produto) and (Produto.getTipo = 'P') then
      begin
        StgProdutos.RowCount := Row + 1;
        StgProdutos.Cells[0, Row] := Produto.getDescricao;
        StgProdutos.Cells[1, Row] := FormatFloat('0.00', Item.getQtde);
        StgProdutos.Cells[2, Row] := FormatFloat('0.00', Item.getPrecoUnit);
        StgProdutos.Cells[3, Row] := FormatFloat('0.00', Item.getQtde * Item.getPrecoUnit);
        Inc(Row);
      end;
    end;
  end;
end;

procedure TFrmOS.atualizarInterface;
begin
  EdtNumOS.MaxLength := 20;
  EdtTitulo.MaxLength := 120;
  EdtDiagnostico.MaxLength := 250;
  EdtEndereco.MaxLength := 250;
  EdtValorPagto.MaxLength := 20;
  EdtQuantidade.MaxLength := 10;
  EdtDesconto.MaxLength := 14;
  EdtTroco.MaxLength := 14;
  MemoDescProblema.MaxLength := 1000;
  MemoSolucaoAplic.MaxLength := 1000;
  organizarTabOrder(Self);
  Position := poScreenCenter;
  KeyPreview := True;
  ShowHint := True;
  BorderStyle := bsNone;

  InicializarGrids; // Inicializa os cabeçalhos dos grids
  CarregarCombos;
end;

procedure TFrmOS.FormCreate(Sender: TObject);
begin
  statusInterface := stConsultar;
  os := TOS.Create;
  fraformLabel1.iniciar('Ordem de Serviço - Cadastro', Self);
  fraSalvaCancela1.iniciar(Self);

  // Inicializar interfaces
  clienteDB := TClientePostgreSQL.Create;
  tecnicoDB := TTecnicoPostgreSQL.Create;
  statusOSDB := TStatusOSPostgreSQL.Create;
  prioridadeOSDB := TPrioridadeOSPostgreSQL.Create;
  produtoDB := TProdutoPostgreSQL.Create;

  atualizarInterface;
end;

procedure TFrmOS.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F12 then
    fraSalvaCancela1btnSalvarClick(Self)
  else if Key = VK_ESCAPE then
    if Application.MessageBox(PChar(MSG_SAIR), PChar(MT_CONFIRMACAO), MB_OKCANCEL + MB_ICONQUESTION) = IDOK then
      fraSalvaCancela1.btnCancelarClick(Self);
end;

procedure TFrmOS.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = KEY_ENTER then
  begin
    Key := KEY_TAB;
    Perform(WM_NEXTDLGCTL, 0, 0);
  end;
end;

procedure TFrmOS.FormShow(Sender: TObject);
begin
  limparInterface(Self);
  arredondarInterface(Self);
  if statusInterface in [stConsultar, stAlterar] then
    getAtributos
  else
    EdtDataEntrada.Text := DateToStr(Date);
end;

procedure TFrmOS.fraSalvaCancela1btnSalvarClick(Sender: TObject);
begin
  if Application.MessageBox(PChar(MSG_CONFIRMAR), 'Confirmação', MB_ICONQUESTION + MB_YESNO) = IDYES then
  begin
    setAtributos;
    fraSalvaCancela1.btnSalvarClick(Sender);
  end;
end;

procedure TFrmOS.fraSalvaCancela1btnCancelarClick(Sender: TObject);
begin
  fraSalvaCancela1.btnCancelarClick(Sender);
end;

procedure TFrmOS.getAtributos;
var
  ClienteSel: TCliente;
  TecnicoSel: TTecnico;
  StatusOSSel: TStatusOS;
  PrioridadeOSSel: TPrioridadeOS;
begin
  if not Assigned(os) then
    Exit;

  with os do
  begin
    EdtNumOS.Text := getNumero;
    ClienteSel := TCliente(getCliente);
    if Assigned(ClienteSel) then
      CmbCliente.ItemIndex := CmbCliente.Items.IndexOf(ClienteSel.getNomeRazao)
    else
      CmbCliente.ItemIndex := -1;
    TecnicoSel := TTecnico(getTecnicoResponsavel);
    if Assigned(TecnicoSel) then
      CmbTecnico.ItemIndex := CmbTecnico.Items.IndexOf(TecnicoSel.getNome)
    else
      CmbTecnico.ItemIndex := -1;
    StatusOSSel := TStatusOS(getStatus);
    if Assigned(StatusOSSel) then
      CmbStatus.ItemIndex := CmbStatus.Items.IndexOf(StatusOSSel.getCodigo)
    else
      CmbStatus.ItemIndex := -1;
    PrioridadeOSSel := TPrioridadeOS(getPrioridade);
    if Assigned(PrioridadeOSSel) then
      CmbPrioridade.ItemIndex := CmbPrioridade.Items.IndexOf(PrioridadeOSSel.getCodigo)
    else
      CmbPrioridade.ItemIndex := -1;
    // Limpar combos de seleção
    CmbServicos.ItemIndex := -1;
    CmbProdutos.ItemIndex := -1;
    EdtTitulo.Text := getTitulo;
    MemoDescProblema.Text := getDescricaoProblema;
    EdtDiagnostico.Text := getDiagnostico;
    MemoSolucaoAplic.Text := getSolucaoAplicada;
    EdtDataEntrada.Text := DateToStr(getDtAbertura);
    if getDtPrevisaoConclusao <> 0 then
      EdtDataPrevConclusao.Text := DateToStr(getDtPrevisaoConclusao);
    if getDtInicioExecucao <> 0 then
      EdtDataSaida.Text := DateToStr(getDtInicioExecucao);
    if getDtConclusao <> 0 then
      Edit3.Text := DateToStr(getDtConclusao);
    EdtEndereco.Text := getEnderecoExecucao;
    EdtDesconto.Text := FormatFloat('0.00', getValorDesconto);
    EdtTroco.Text := FormatFloat('0.00', getValorAcrescimo);
    EdtValorPagto.Text := getFormaPagamento;
    EdtQuantidade.Text := IntToStr(getAnexosQtde);
  end;

  // Preencher os grids com os itens existentes
  PreencherGridServicos;
  PreencherGridProdutos;
end;

function TFrmOS.getOS: TOS;
begin
  Result := os;
end;

procedure TFrmOS.setAtributos;
begin
  if not Assigned(os) then
    os := TOS.Create;

  with os do
  begin
    setNumero(EdtNumOS.Text);
    if CmbCliente.ItemIndex >= 0 then
      setCliente(TCliente(CmbCliente.Items.Objects[CmbCliente.ItemIndex]))
    else
      setCliente(nil);
    if CmbTecnico.ItemIndex >= 0 then
      setTecnicoResponsavel(TTecnico(CmbTecnico.Items.Objects[CmbTecnico.ItemIndex]))
    else
      setTecnicoResponsavel(nil);
    if CmbStatus.ItemIndex >= 0 then
      setStatus(TStatusOS(CmbStatus.Items.Objects[CmbStatus.ItemIndex]))
    else
      setStatus(nil);
    if CmbPrioridade.ItemIndex >= 0 then
      setPrioridade(TPrioridadeOS(CmbPrioridade.Items.Objects[CmbPrioridade.ItemIndex]))
    else
      setPrioridade(nil);
    // Nota: A adição de itens aos OSItem será implementada separadamente (ao confirmar seleção nos combos)
    setTitulo(EdtTitulo.Text);
    setDescricaoProblema(MemoDescProblema.Text);
    setDiagnostico(EdtDiagnostico.Text);
    setSolucaoAplicada(MemoSolucaoAplic.Text);
    setDtAbertura(StrToDateDef(EdtDataEntrada.Text, Date));
    setDtPrevisaoConclusao(StrToDateDef(EdtDataPrevConclusao.Text, 0));
    setDtInicioExecucao(StrToDateDef(EdtDataSaida.Text, 0));
    setDtConclusao(StrToDateDef(Edit3.Text, 0));
    setEnderecoExecucao(EdtEndereco.Text);
    setValorDesconto(StrToFloatDef(EdtDesconto.Text, 0));
    setValorAcrescimo(StrToFloatDef(EdtTroco.Text, 0));
    setFormaPagamento(EdtValorPagto.Text);
    setAnexosQtde(StrToIntDef(EdtQuantidade.Text, 0));
  end;
end;

procedure TFrmOS.setOS(os: TOS);
begin
  if Assigned(Self.os) then
    Self.os.Free;
  Self.os := os;
end;

procedure TFrmOS.setStatusInterface(statusInterface: TStatusInterface);
begin
  Self.statusInterface := statusInterface;
  fraformLabel1.setStatusInterface(statusInterface);
end;

end.
