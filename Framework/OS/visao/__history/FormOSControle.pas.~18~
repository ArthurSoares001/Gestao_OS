
unit FormOSControle;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.StdCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, frameRodaPeControle, frameCabecalhoControle,
  frameformLabel, Filtro, Data.DB, Vcl.DBGrids, OSPostgreSQL, OS, OrList, OSItem, Produto;

type
  TFrmOSControle = class(TForm)
    fraformLabel1: TfraformLabel;
    fraRodaPeControle1: TfraRodaPeControle;
    stgDados: TStringGrid;
    GroupBox1: TGroupBox;
    stgDadosServico: TStringGrid;
    GroupBox2: TGroupBox;
    stgDadosProduto: TStringGrid;
    procedure FormCreate(Sender: TObject);
    procedure stgDadosDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure FormShow(Sender: TObject);
    procedure fraRodaPeControle1spdEditarClick(Sender: TObject);
    procedure fraRodaPeControle1spdExcluirClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure fraRodaPeControle1spdImprimirClick(Sender: TObject);
    procedure stgDadosClick(Sender: TObject);
    procedure fraRodaPeControle1spdExcelClick(Sender: TObject);
    procedure frameCabecalhoControle1edtDescricaoChange(Sender: TObject);
    procedure fraCabecalhoControle1btnNovoClick(Sender: TObject);
    procedure stgDadosDblClick(Sender: TObject);
    procedure stgDadosProdutoDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure stgDadosServicoDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure fraCabecalhoControle1spdProcurarClick(Sender: TObject);
  private
    filtro: TFiltro;
    OSDB: TOSPostgreSQL;
    ListaOS: TList;
    procedure atualizarGrid;
    procedure atualizarGridProduto(OS: TOS);
    procedure atualizarGridServico(OS: TOS);
    procedure atualizarInterface;
    procedure chamarFormOS;
    procedure FreeListaOS;
    procedure carregarItensOSSelecionada;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

var
  FrmOSControle: TFrmOSControle;

implementation

uses
  Constantes, Biblioteca, DataModule, Cliente, StatusOS, FormOS;

{$R *.dfm}

{ TFrmOSControle }

constructor TFrmOSControle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  OSDB := TOSPostgreSQL.Create;
  ListaOS := TList.Create;
end;

destructor TFrmOSControle.Destroy;
begin
  FreeListaOS;
  ListaOS.Free;
  OSDB.Free;
  inherited Destroy;
end;

procedure TFrmOSControle.FreeListaOS;
var
  I: Integer;
begin
  for I := 0 to ListaOS.Count - 1 do
    TObject(ListaOS[I]).Free;
  ListaOS.Clear;
end;

procedure TFrmOSControle.atualizarInterface;
begin
  organizarTabOrder(Self);
  Position := poScreenCenter;
  stgDados.Options := stgDados.Options + [goRowSelect];
  stgDados.ScrollBars := ssBoth;
  KeyPreview := True;
  ShowHint := True;
  BorderStyle := bsNone;
  WindowState := wsMaximized;

  // Configurar a grid stgDadosProduto
  stgDadosProduto.Options := stgDadosProduto.Options + [goRowSelect];
  stgDadosProduto.ScrollBars := ssBoth;

  // Configurar a grid stgDadosServico
  stgDadosServico.Options := stgDadosServico.Options + [goRowSelect];
  stgDadosServico.ScrollBars := ssBoth;


end;

procedure TFrmOSControle.carregarItensOSSelecionada;
var
  OS, OSCompleta: TOS;
begin
  // Verifica se há linha válida selecionada
  if (stgDados.Row - 1 < 0) or (stgDados.Row - 1 >= ListaOS.Count) then
  begin
    // Limpa grids se nenhuma OS válida for selecionada
    stgDadosProduto.RowCount := 2;
    stgDadosProduto.Rows[1].Clear;
    stgDadosServico.RowCount := 2;
    stgDadosServico.Rows[1].Clear;
    Exit;
  end;

  // Obtém o objeto TOS da linha selecionada
  OS := TOS(ListaOS[stgDados.Row - 1]);

  // Busca a OS completa com seus itens
  OSCompleta := OSDB.Procurar(OS);
  try
    if Assigned(OSCompleta) then
    begin
      atualizarGridProduto(OSCompleta);
      atualizarGridServico(OSCompleta);
    end
    else
    begin
      // Limpa grids se a OS não for encontrada
      stgDadosProduto.RowCount := 2;
      stgDadosProduto.Rows[1].Clear;
      stgDadosServico.RowCount := 2;
      stgDadosServico.Rows[1].Clear;
    end;
  finally
    OSCompleta.Free;
  end;
end;


procedure TFrmOSControle.chamarFormOS;
var
  OS: TOS;
begin

  if (stgDados.Row - 1 < 0) or (stgDados.Row - 1 >= ListaOS.Count) then
    Exit;

  OS := TOS(ListaOS[stgDados.Row - 1]);

  frmOS := TfrmOS.Create(Self);
  try
    frmOS.setStatusInterface(stAlterar);
    frmOS.setOS(OS);

    if frmOS.ShowModal = mrOk then
    begin

      if frmOS.getOS.validar then
      begin
        OSDB.Alterar(frmOS.getOS);
        atualizarGrid;
      end;
    end;
  finally
    FreeAndNil(frmOS);
  end;
end;


procedure TFrmOSControle.FormCreate(Sender: TObject);
begin
  fraformLabel1.iniciar('OS - Controle', Self);
  fraCabecalhoControle1.iniciar(Self);
  fraRodaPeControle1.iniciar(NULL_STRING, Self, stgDados);
  filtro := TFiltro.Create;
  atualizarInterface;
end;

procedure TFrmOSControle.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F2 then
    fraCabecalhoControle1btnNovoClick(Self)
  else if Key = VK_F3 then
    fraCabecalhoControle1spdProcurarClick(Self)
  else if Key = VK_ESCAPE then
    Close;
end;

procedure TFrmOSControle.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = KEY_ENTER then
  begin
    Key := KEY_TAB;
    Perform(WM_NEXTDLGCTL, 0, 0);
  end;
end;

procedure TFrmOSControle.FormShow(Sender: TObject);
begin
  limparInterface(Self);
  atualizarGrid;
  carregarItensOSSelecionada;
end;

procedure TFrmOSControle.fraCabecalhoControle1btnNovoClick(Sender: TObject);
var
  OS: TOS;
begin
  OS := TOS.Create;
  try
    frmOS := TfrmOS.Create(Self);
    try
     // frmOS.setStatusInterface(stIncluir);
     // frmOS.setProduto(Produto);
      if frmOS.ShowModal = mrOk then
      begin
      //  if frmOS.getProduto.validar then
       // begin
       //   OSDB.Inserir(frmOS.getOS);
         // atualizarGrid;
       // end;
      end;
    finally
      FreeAndNil(frmOS);
    end;
  finally
    OS.Free;
  end;
end;

procedure TFrmOSControle.fraCabecalhoControle1spdProcurarClick(Sender: TObject);
begin
  filtro.novaInstancia;
  filtro.setDescricao(fraCabecalhoControle1.edtDescricao.Text);
  fraCabecalhoControle1.ed
  filtro.setDataAte(StrToData(fraCabecalhoControle1.EdtAte.Text));
  atualizarGrid;
end;

procedure TFrmOSControle.frameCabecalhoControle1edtDescricaoChange(Sender: TObject);
begin
  fraCabecalhoControle1.edtDescricaoChange(Sender);
end;

procedure TFrmOSControle.fraRodaPeControle1spdEditarClick(Sender: TObject);
begin
  chamarFormOS;
end;

procedure TFrmOSControle.fraRodaPeControle1spdExcelClick(Sender: TObject);
begin
  fraRodaPeControle1.spdExcelClick(Sender);
end;

procedure TFrmOSControle.fraRodaPeControle1spdExcluirClick(Sender: TObject);
var
  OS: TOS;
begin
  if (stgDados.Row - 1 < 0) or (stgDados.Row - 1 >= ListaOS.Count) then
    Exit;

  if Application.MessageBox(PChar(MSG_CONFIRMA_EXCLUSAO), 'Confirmação', MB_ICONQUESTION + MB_YESNO) = IDYES then
  begin
    OS := TOS(ListaOS[stgDados.Row - 1]);
    OSDB.Deletar(OS);
    atualizarGrid;
  end;
end;

procedure TFrmOSControle.fraRodaPeControle1spdImprimirClick(Sender: TObject);
begin
  { Implementação existente mantida }
end;

procedure TFrmOSControle.stgDadosClick(Sender: TObject);
begin
  carregarItensOSSelecionada;
end;

procedure TFrmOSControle.stgDadosDblClick(Sender: TObject);
begin
  chamarFormOS;
end;

procedure TFrmOSControle.stgDadosDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  strTemp: string;
  grid: TStringGrid;
begin
  grid := Sender as TStringGrid;
  grid.ColWidths[0] := Trunc(grid.Width * 0.10); // Id
  grid.ColWidths[1] := Trunc(grid.Width * 0.15); // Numero
  grid.ColWidths[2] := Trunc(grid.Width * 0.25); // Cliente
  grid.ColWidths[3] := Trunc(grid.Width * 0.25); // Titulo
  grid.ColWidths[4] := Trunc(grid.Width * 0.15); // Status
  grid.ColWidths[5] := Trunc(grid.Width * 0.10); // DtAbertura
  with grid do
  begin
    strTemp := Cells[ACol, ARow];
    if ACol = ColCount - 1 then
      strTemp := strTemp + StringOfChar(' ', 5);

    Canvas.Font.Style := [];
    Canvas.Font.Color := clBlack;
    Canvas.Brush.Color := clWindow;

    if ARow = 0 then
    begin
      Canvas.Font.Style := [fsBold];
      Canvas.Brush.Color := clBtnFace;
    end
    else
    begin
      if ARow = Row then
      begin
        Canvas.Font.Color := clWhite;
        Canvas.Brush.Color := clHighlight;
      end
      else
      begin
        if ARow mod 2 = 0 then
          Canvas.Brush.Color := clInfoBk
        else
          Canvas.Brush.Color := clWhite;
      end;
    end;
    Canvas.FillRect(Rect);
    if ACol in [2, 3, 4] then
      DrawText(Canvas.Handle, PChar(' ' + strTemp), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_LEFT)
    else
      DrawText(Canvas.Handle, PChar(' ' + strTemp + ' '), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_CENTER);
  end;
end;

procedure TFrmOSControle.stgDadosProdutoDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  strTemp: string;
  grid: TStringGrid;
begin
  grid := Sender as TStringGrid;
  grid.ColWidths[0] := Trunc(grid.Width * 0.08); // ID
  grid.ColWidths[1] := Trunc(grid.Width * 0.20); // Descrição
  grid.ColWidths[2] := Trunc(grid.Width * 0.08); // Tipo
  grid.ColWidths[3] := Trunc(grid.Width * 0.10); // Quantidade
  grid.ColWidths[4] := Trunc(grid.Width * 0.10); // Preço Unit.
  grid.ColWidths[5] := Trunc(grid.Width * 0.10); // Desconto
  grid.ColWidths[6] := Trunc(grid.Width * 0.10); // Acréscimo
  grid.ColWidths[7] := Trunc(grid.Width * 0.10); // Total
  grid.ColWidths[8] := Trunc(grid.Width * 0.24); // Produto

  with grid do
  begin
    strTemp := Cells[ACol, ARow];
    if ACol = ColCount - 1 then
      strTemp := strTemp + StringOfChar(' ', 5);

    Canvas.Font.Style := [];
    Canvas.Font.Color := clBlack;
    Canvas.Brush.Color := clWindow;

    if ARow = 0 then
    begin
      Canvas.Font.Style := [fsBold];
      Canvas.Brush.Color := clBtnFace;
    end
    else
    begin
      if ARow = Row then
      begin
        Canvas.Font.Color := clWhite;
        Canvas.Brush.Color := clHighlight;
      end
      else
      begin
        if ARow mod 2 = 0 then
          Canvas.Brush.Color := clInfoBk
        else
          Canvas.Brush.Color := clWhite;
      end;
    end;
    Canvas.FillRect(Rect);
    if ACol in [1, 8] then
      DrawText(Canvas.Handle, PChar(' ' + strTemp), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_LEFT)
    else
      DrawText(Canvas.Handle, PChar(' ' + strTemp + ' '), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_CENTER);
  end;
end;

procedure TFrmOSControle.stgDadosServicoDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  strTemp: string;
  grid: TStringGrid;
begin
  grid := Sender as TStringGrid;
  grid.ColWidths[0] := Trunc(grid.Width * 0.08); // ID
  grid.ColWidths[1] := Trunc(grid.Width * 0.20); // Descrição
  grid.ColWidths[2] := Trunc(grid.Width * 0.08); // Tipo
  grid.ColWidths[3] := Trunc(grid.Width * 0.10); // Quantidade
  grid.ColWidths[4] := Trunc(grid.Width * 0.10); // Preço Unit.
  grid.ColWidths[5] := Trunc(grid.Width * 0.10); // Desconto
  grid.ColWidths[6] := Trunc(grid.Width * 0.10); // Acréscimo
  grid.ColWidths[7] := Trunc(grid.Width * 0.10); // Total
  grid.ColWidths[8] := Trunc(grid.Width * 0.24); // Produto

  with grid do
  begin
    strTemp := Cells[ACol, ARow];
    if ACol = ColCount - 1 then
      strTemp := strTemp + StringOfChar(' ', 5);

    Canvas.Font.Style := [];
    Canvas.Font.Color := clBlack;
    Canvas.Brush.Color := clWindow;

    if ARow = 0 then
    begin
      Canvas.Font.Style := [fsBold];
      Canvas.Brush.Color := clBtnFace;
    end
    else
    begin
      if ARow = Row then
      begin
        Canvas.Font.Color := clWhite;
        Canvas.Brush.Color := clHighlight;
      end
      else
      begin
        if ARow mod 2 = 0 then
          Canvas.Brush.Color := clInfoBk
        else
          Canvas.Brush.Color := clWhite;
      end;
    end;
    Canvas.FillRect(Rect);
    if ACol in [1, 8] then
      DrawText(Canvas.Handle, PChar(' ' + strTemp), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_LEFT)
    else
      DrawText(Canvas.Handle, PChar(' ' + strTemp + ' '), -1, Rect, DT_SINGLELINE or DT_VCENTER or DT_CENTER);
  end;
end;

procedure TFrmOSControle.atualizarGrid;
var
  OS: TOS;
  I: Integer;
begin
  processando(Self);
  try
    FreeListaOS;
    stgDados.RowCount := 2;
    stgDados.Rows[1].Clear;
    stgDados.Cells[0, 0] := 'Id';
    stgDados.Cells[1, 0] := 'Número';
    stgDados.Cells[2, 0] := 'Cliente';
    stgDados.Cells[3, 0] := 'Título';
    stgDados.Cells[4, 0] := 'Status';
    stgDados.Cells[5, 0] := 'Data Abertura';

    ListaOS := OSDB.ProcurarTodos(filtro, fraCabecalhoControle1.CmbTipo.ItemIndex);

    if ListaOS.Count > 0 then
    begin
      stgDados.RowCount := ListaOS.Count + 1;
      for I := 0 to ListaOS.Count - 1 do
      begin
        OS := TOS(ListaOS[I]);
        stgDados.Cells[0, I + 1] := IntToStr(OS.getId);
        stgDados.Cells[1, I + 1] := OS.getNumero;
        stgDados.Cells[2, I + 1] := (OS.getCliente as TCliente).getNomeRazao;
        stgDados.Cells[3, I + 1] := OS.getTitulo;
        stgDados.Cells[4, I + 1] := (OS.getStatus as TStatusOS).getCodigo;
        stgDados.Cells[5, I + 1] := DateToStr(OS.getDtAbertura);
      end;
    end;
    fraRodaPeControle1.setRegistro(ListaOS.Count);

    // Limpar as grids de produtos e serviços ao atualizar a grid principal
    stgDadosProduto.RowCount := 2;
    stgDadosProduto.Rows[1].Clear;
    stgDadosServico.RowCount := 2;
    stgDadosServico.Rows[1].Clear;
  finally
    processoFinalizado(Self);
  end;
end;

procedure TFrmOSControle.atualizarGridProduto(OS: TOS);
var
  OSItem: TOSItem;
  I, RowIndex: Integer;
begin
  processando(Self);
  try
    stgDadosProduto.RowCount := 2;
    stgDadosProduto.Rows[1].Clear;
    stgDadosProduto.Cells[0, 0] := 'ID';
    stgDadosProduto.Cells[1, 0] := 'Descrição';
    stgDadosProduto.Cells[2, 0] := 'Tipo';
    stgDadosProduto.Cells[3, 0] := 'Quantidade';
    stgDadosProduto.Cells[4, 0] := 'Preço Unit.';
    stgDadosProduto.Cells[5, 0] := 'Desconto';
    stgDadosProduto.Cells[6, 0] := 'Acréscimo';
    stgDadosProduto.Cells[7, 0] := 'Total';
    stgDadosProduto.Cells[8, 0] := 'Produto';

    if Assigned(OS) and Assigned(OS.getLstOSItem as TOrList) and ((OS.getLstOSItem as TOrList).contar > 0) then
    begin
      RowIndex := 1;
      for I := 0 to (OS.getLstOSItem as TOrList).contar - 1 do
      begin
        OSItem := ((OS.getLstOSItem as TOrList).item(I) as TOSItem);
        if OSItem.getTipo = 'P' then
        begin
          stgDadosProduto.RowCount := RowIndex + 1;
          stgDadosProduto.Cells[0, RowIndex] := IntToStr(OSItem.getId);
          stgDadosProduto.Cells[1, RowIndex] := OSItem.getDescricao;
          stgDadosProduto.Cells[2, RowIndex] := OSItem.getTipo;
          stgDadosProduto.Cells[3, RowIndex] := FormatFloat('0.000', OSItem.getQtde);
          stgDadosProduto.Cells[4, RowIndex] := Format('%8.2m', [OSItem.getPrecoUnit]);
          stgDadosProduto.Cells[5, RowIndex] := Format('%8.2m', [OSItem.getDescontoValor]);
          stgDadosProduto.Cells[6, RowIndex] := Format('%8.2m', [OSItem.getAcrescimoValor]);
          stgDadosProduto.Cells[7, RowIndex] := Format('%8.2m', [OSItem.getTotalItem]);
          stgDadosProduto.Cells[8, RowIndex] := (OSItem.getProduto as TProduto).getDescricao;
          Inc(RowIndex);
        end;
      end;
    end;
  finally
    processoFinalizado(Self);
  end;
end;

procedure TFrmOSControle.atualizarGridServico(OS: TOS);
var
  OSItem: TOSItem;
  I, RowIndex: Integer;
begin
  processando(Self);
  try
    stgDadosServico.RowCount := 2;
    stgDadosServico.Rows[1].Clear;
    stgDadosServico.Cells[0, 0] := 'ID';
    stgDadosServico.Cells[1, 0] := 'Descrição';
    stgDadosServico.Cells[2, 0] := 'Tipo';
    stgDadosServico.Cells[3, 0] := 'Quantidade';
    stgDadosServico.Cells[4, 0] := 'Preço Unit.';
    stgDadosServico.Cells[5, 0] := 'Desconto';
    stgDadosServico.Cells[6, 0] := 'Acréscimo';
    stgDadosServico.Cells[7, 0] := 'Total';
    stgDadosServico.Cells[8, 0] := 'Produto';

    if Assigned(OS) and Assigned(OS.getLstOSItem as TOrList) and ((OS.getLstOSItem as TOrList).contar > 0) then
    begin
      RowIndex := 1;
      for I := 0 to (OS.getLstOSItem as TOrList).contar - 1 do
      begin
        OSItem := ((OS.getLstOSItem as TOrList).item(I) as TOSItem);
        if OSItem.getTipo = 'S' then
        begin
          stgDadosServico.RowCount := RowIndex + 1;
          stgDadosServico.Cells[0, RowIndex] := IntToStr(OSItem.getId);
          stgDadosServico.Cells[1, RowIndex] := OSItem.getDescricao;
          stgDadosServico.Cells[2, RowIndex] := OSItem.getTipo;
          stgDadosServico.Cells[3, RowIndex] := FormatFloat('0.000', OSItem.getQtde);
          stgDadosServico.Cells[4, RowIndex] := Format('%8.2m', [OSItem.getPrecoUnit]);
          stgDadosServico.Cells[5, RowIndex] := Format('%8.2m', [OSItem.getDescontoValor]);
          stgDadosServico.Cells[6, RowIndex] := Format('%8.2m', [OSItem.getAcrescimoValor]);
          stgDadosServico.Cells[7, RowIndex] := Format('%8.2m', [OSItem.getTotalItem]);
          stgDadosServico.Cells[8, RowIndex] := (OSItem.getProduto as TProduto).getDescricao;
          Inc(RowIndex);
        end;
      end;
    end;
  finally
    processoFinalizado(Self);
  end;
end;

end.
