unit OSPostgreSQL;

interface

uses
  OS, SysUtils, Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Filtro, OSDB, Cliente, Tecnico, StatusOS, PrioridadeOS, MotivoCancelamento;

type
  TOSPostgreSQL = class(TInterfacedObject, IOSDB)
  private
    function CreateFDQuery: TFDQuery;
  public
    procedure Inserir(OS: TOS);
    procedure Alterar(OS: TOS);
    function Procurar(OS: TOS): TOS;
    procedure Deletar(OS: TOS);
    function ProcurarTodos(Filtro: TFiltro; OrdenarPor: Integer): TList;
  end;

implementation

uses
  DataModule;

{ TOSPostgreSQL }

function TOSPostgreSQL.CreateFDQuery: TFDQuery;
begin
  Result := TFDQuery.Create(nil);
  Result.Connection := DMConexao.Conexao;
end;

procedure TOSPostgreSQL.Inserir(OS: TOS);
var
  FDQuery: TFDQuery;
begin
  FDQuery := CreateFDQuery;
  try
    try
      FDQuery.SQL.Text :=
        'INSERT INTO public."OS" (' +
        '"Numero", "ClienteId", "TecnicoResponsavelId", "Titulo", ' +
        '"DescricaoProblema", "Diagnostico", "SolucaoAplicada", ' +
        '"StatusId", "PrioridadeId", "Origem", "DtAbertura", ' +
        '"DtPrevistaConclusao", "DtInicioExecucao", "DtConclusao", ' +
        '"MotivoCancelamentoId", "EnderecoExecucao", "ValorDesconto", ' +
        '"ValorAcrescimo", "FormaPagamento", "Observacoes", ' +
        '"UsuarioAbertura", "UsuarioUltimaAtualizacao", "AnexosQtde", ' +
        '"DtCadastro", "DtAtualizacao") ' +
        'VALUES (' +
        ':Numero, :ClienteId, :TecnicoResponsavelId, :Titulo, ' +
        ':DescricaoProblema, :Diagnostico, :SolucaoAplicada, ' +
        ':StatusId, :PrioridadeId, :Origem, :DtAbertura, ' +
        ':DtPrevistaConclusao, :DtInicioExecucao, :DtConclusao, ' +
        ':MotivoCancelamentoId, :EnderecoExecucao, :ValorDesconto, ' +
        ':ValorAcrescimo, :FormaPagamento, :Observacoes, ' +
        ':UsuarioAbertura, :UsuarioUltimaAtualizacao, :AnexosQtde, ' +
        ':DtCadastro, :DtAtualizacao) ' +
        'RETURNING "Id"';
      with FDQuery do
      begin
        DMConexao.Conexao.StartTransaction;
        try
          ParamByName('Numero').AsString := OS.getNumero;
          ParamByName('ClienteId').AsInteger := OS.getCliente.getId;
          if Assigned(OS.getTecnicoResponsavel) then
            ParamByName('TecnicoResponsavelId').AsInteger := OS.getTecnicoResponsavel.getId
          else
            ParamByName('TecnicoResponsavelId').Clear;
          ParamByName('Titulo').AsString := OS.getTitulo;
          ParamByName('DescricaoProblema').AsString := OS.getDescricaoProblema;
          ParamByName('Diagnostico').AsString := OS.getDiagnostico;
          ParamByName('SolucaoAplicada').AsString := OS.getSolucaoAplicada;
          ParamByName('StatusId').AsInteger := OS.getStatus.getId;
          ParamByName('PrioridadeId').AsInteger := OS.getPrioridade.getId;
          ParamByName('Origem').AsString := OS.getOrigem;
          ParamByName('DtAbertura').AsDateTime := OS.getDtAbertura;
          if OS.getDtPrevisaoConclusao <> 0 then
            ParamByName('DtPrevistaConclusao').AsDateTime := OS.getDtPrevisaoConclusao
          else
            ParamByName('DtPrevistaConclusao').Clear;
          if OS.getDtInicioExecucao <> 0 then
            ParamByName('DtInicioExecucao').AsDateTime := OS.getDtInicioExecucao
          else
            ParamByName('DtInicioExecucao').Clear;
          if OS.getDtConclusao <> 0 then
            ParamByName('DtConclusao').AsDateTime := OS.getDtConclusao
          else
            ParamByName('DtConclusao').Clear;
          if Assigned(OS.getMotivoCancelamento) then
            ParamByName('MotivoCancelamentoId').AsInteger := OS.getMotivoCancelamento.getId
          else
            ParamByName('MotivoCancelamentoId').Clear;
          ParamByName('EnderecoExecucao').AsString := OS.getEnderecoExecucao;
          ParamByName('ValorDesconto').AsFloat := OS.getValorDesconto;
          ParamByName('ValorAcrescimo').AsFloat := OS.getValorAcrescimo;
          ParamByName('FormaPagamento').AsString := OS.getFormaPagamento;
          ParamByName('Observacoes').AsString := OS.getObservacoes;
          ParamByName('UsuarioAbertura').AsString := OS.getUsuarioAbertura;
          ParamByName('UsuarioUltimaAtualizacao').AsString := OS.getUsuarioUltimaAtualizacao;
          ParamByName('AnexosQtde').AsInteger := OS.getAnexosQtde;
          ParamByName('DtCadastro').AsDateTime := OS.getDtCadastro;
          ParamByName('DtAtualizacao').AsDateTime := OS.getDtAtualizacao;
          Open;
          OS.setId(FieldByName('Id').AsInteger);
          DMConexao.Conexao.Commit;
          Close;
        except
          on E: Exception do
          begin
            DMConexao.Conexao.Rollback;
            raise Exception.CreateFmt('Erro ao inserir OS: %s', [E.Message]);
          end;
        end;
      end;
    finally
      FDQuery.Free;
    end;
  except
    on E: Exception do
      raise;
  end;
end;

procedure TOSPostgreSQL.Alterar(OS: TOS);
var
  FDQuery: TFDQuery;
begin
  FDQuery := CreateFDQuery;
  try
    try
      FDQuery.SQL.Text :=
        'UPDATE public."OS" SET ' +
        '"Numero" = :Numero, "ClienteId" = :ClienteId, ' +
        '"TecnicoResponsavelId" = :TecnicoResponsavelId, "Titulo" = :Titulo, ' +
        '"DescricaoProblema" = :DescricaoProblema, "Diagnostico" = :Diagnostico, ' +
        '"SolucaoAplicada" = :SolucaoAplicada, "StatusId" = :StatusId, ' +
        '"PrioridadeId" = :PrioridadeId, "Origem" = :Origem, ' +
        '"DtAbertura" = :DtAbertura, "DtPrevistaConclusao" = :DtPrevistaConclusao, ' +
        '"DtInicioExecucao" = :DtInicioExecucao, "DtConclusao" = :DtConclusao, ' +
        '"MotivoCancelamentoId" = :MotivoCancelamentoId, "EnderecoExecucao" = :EnderecoExecucao, ' +
        '"ValorDesconto" = :ValorDesconto, "ValorAcrescimo" = :ValorAcrescimo, ' +
        '"FormaPagamento" = :FormaPagamento, "Observacoes" = :Observacoes, ' +
        '"UsuarioAbertura" = :UsuarioAbertura, "UsuarioUltimaAtualizacao" = :UsuarioUltimaAtualizacao, ' +
        '"AnexosQtde" = :AnexosQtde, "DtCadastro" = :DtCadastro, "DtAtualizacao" = :DtAtualizacao ' +
        'WHERE "Id" = :Id';
      with FDQuery do
      begin
        DMConexao.Conexao.StartTransaction;
        try
          ParamByName('Numero').AsString := OS.getNumero;
          ParamByName('ClienteId').AsInteger := OS.getCliente.getId;
          if Assigned(OS.getTecnicoResponsavel) then
            ParamByName('TecnicoResponsavelId').AsInteger := OS.getTecnicoResponsavel.getId
          else
            ParamByName('TecnicoResponsavelId').Clear;
          ParamByName('Titulo').AsString := OS.getTitulo;
          ParamByName('DescricaoProblema').AsString := OS.getDescricaoProblema;
          ParamByName('Diagnostico').AsString := OS.getDiagnostico;
          ParamByName('SolucaoAplicada').AsString := OS.getSolucaoAplicada;
          ParamByName('StatusId').AsInteger := OS.getStatus.getId;
          ParamByName('PrioridadeId').AsInteger := OS.getPrioridade.getId;
          ParamByName('Origem').AsString := OS.getOrigem;
          ParamByName('DtAbertura').AsDateTime := OS.getDtAbertura;
          if OS.getDtPrevisaoConclusao <> 0 then
            ParamByName('DtPrevistaConclusao').AsDateTime := OS.getDtPrevisaoConclusao
          else
            ParamByName('DtPrevistaConclusao').Clear;
          if OS.getDtInicioExecucao <> 0 then
            ParamByName('DtInicioExecucao').AsDateTime := OS.getDtInicioExecucao
          else
            ParamByName('DtInicioExecucao').Clear;
          if OS.getDtConclusao <> 0 then
            ParamByName('DtConclusao').AsDateTime := OS.getDtConclusao
          else
            ParamByName('DtConclusao').Clear;
          if Assigned(OS.getMotivoCancelamento) then
            ParamByName('MotivoCancelamentoId').AsInteger := OS.getMotivoCancelamento.getId
          else
            ParamByName('MotivoCancelamentoId').Clear;
          ParamByName('EnderecoExecucao').AsString := OS.getEnderecoExecucao;
          ParamByName('ValorDesconto').AsFloat := OS.getValorDesconto;
          ParamByName('ValorAcrescimo').AsFloat := OS.getValorAcrescimo;
          ParamByName('FormaPagamento').AsString := OS.getFormaPagamento;
          ParamByName('Observacoes').AsString := OS.getObservacoes;
          ParamByName('UsuarioAbertura').AsString := OS.getUsuarioAbertura;
          ParamByName('UsuarioUltimaAtualizacao').AsString := OS.getUsuarioUltimaAtualizacao;
          ParamByName('AnexosQtde').AsInteger := OS.getAnexosQtde;
          ParamByName('DtCadastro').AsDateTime := OS.getDtCadastro;
          ParamByName('DtAtualizacao').AsDateTime := OS.getDtAtualizacao;
          ParamByName('Id').AsInteger := OS.getId;
          ExecSQL;
          DMConexao.Conexao.Commit;
          Close;
        except
          on E: Exception do
          begin
            DMConexao.Conexao.Rollback;
            raise Exception.CreateFmt('Erro ao alterar OS: %s', [E.Message]);
          end;
        end;
      end;
    finally
      FDQuery.Free;
    end;
  except
    on E: Exception do
      raise;
  end;
end;

function TOSPostgreSQL.Procurar(OS: TOS): TOS;
var
  FDQuery: TFDQuery;
begin
  Result := nil;
  FDQuery := CreateFDQuery;
  try
    try
      FDQuery.SQL.Text :=
        'SELECT o.*, c."Nome" AS cliente_nome, t."Nome" AS tecnico_nome, ' +
        's."Descricao" AS status_descricao, p."Descricao" AS prioridade_descricao, ' +
        'm."Descricao" AS motivo_cancelamento_descricao ' +
        'FROM public."OS" o ' +
        'INNER JOIN public."Cliente" c ON o."ClienteId" = c."Id" ' +
        'LEFT JOIN public."Tecnico" t ON o."TecnicoResponsavelId" = t."Id" ' +
        'INNER JOIN public."StatusOS" s ON o."StatusId" = s."Id" ' +
        'INNER JOIN public."Prioridadeos" p ON o."PrioridadeId" = p."Id" ' +
        'LEFT JOIN public."MotivoCancelamento" m ON o."MotivoCancelamentoId" = m."Id" ' +
        'WHERE o."Id" = :Id';
      FDQuery.ParamByName('Id').AsInteger := OS.getId;
      FDQuery.Open;
      if not FDQuery.IsEmpty then
      begin
        Result := TOS.Create;
        Result.setId(FDQuery.FieldByName('Id').AsInteger);
        Result.setNumero(FDQuery.FieldByName('Numero').AsString);
        Result.getCliente.setId(FDQuery.FieldByName('ClienteId').AsInteger);
        (Result.getCliente as TCliente).setNome(FDQuery.FieldByName('cliente_nome').AsString);
        if not FDQuery.FieldByName('TecnicoResponsavelId').IsNull then
        begin
          Result.getTecnicoResponsavel.setId(FDQuery.FieldByName('TecnicoResponsavelId').AsInteger);
          (Result.getTecnicoResponsavel as TTecnico).setNome(FDQuery.FieldByName('tecnico_nome').AsString);
        end;
        Result.setTitulo(FDQuery.FieldByName('Titulo').AsString);
        Result.setDescricaoProblema(FDQuery.FieldByName('DescricaoProblema').AsString);
        Result.setDiagnostico(FDQuery.FieldByName('Diagnostico').AsString);
        Result.setSolucaoAplicada(FDQuery.FieldByName('SolucaoAplicada').AsString);
        Result.getStatus.setId(FDQuery.FieldByName('StatusId').AsInteger);
        (Result.getStatus as TStatusOS).setDescricao(FDQuery.FieldByName('status_descricao').AsString);
        Result.getPrioridade.setId(FDQuery.FieldByName('PrioridadeId').AsInteger);
        (Result.getPrioridade as TPrioridadeOS).setDescricao(FDQuery.FieldByName('prioridade_descricao').AsString);
        Result.setOrigem(FDQuery.FieldByName('Origem').AsString);
        Result.setDtAbertura(FDQuery.FieldByName('DtAbertura').AsDateTime);
        if not FDQuery.FieldByName('DtPrevistaConclusao').IsNull then
          Result.setDtPrevisaoConclusao(FDQuery.FieldByName('DtPrevistaConclusao').AsDateTime);
        if not FDQuery.FieldByName('DtInicioExecucao').IsNull then
          Result.setDtInicioExecucao(FDQuery.FieldByName('DtInicioExecucao').AsDateTime);
        if not FDQuery.FieldByName('DtConclusao').IsNull then
          Result.setDtConclusao(FDQuery.FieldByName('DtConclusao').AsDateTime);
        if not FDQuery.FieldByName('MotivoCancelamentoId').IsNull then
        begin
          Result.getMotivoCancelamento.setId(FDQuery.FieldByName('MotivoCancelamentoId').AsInteger);
          (Result.getMotivoCancelamento as TMotivoCancelamento).setDescricao(FDQuery.FieldByName('motivo_cancelamento_descricao').AsString);
        end;
        Result.setEnderecoExecucao(FDQuery.FieldByName('EnderecoExecucao').AsString);
        Result.setValorDesconto(FDQuery.FieldByName('ValorDesconto').AsFloat);
        Result.setValorAcrescimo(FDQuery.FieldByName('ValorAcrescimo').AsFloat);
        Result.setFormaPagamento(FDQuery.FieldByName('FormaPagamento').AsString);
        Result.setObservacoes(FDQuery.FieldByName('Observacoes').AsString);
        Result.setUsuarioAbertura(FDQuery.FieldByName('UsuarioAbertura').AsString);
        Result.setUsuarioUltimaAtualizacao(FDQuery.FieldByName('UsuarioUltimaAtualizacao').AsString);
        Result.setAnexosQtde(FDQuery.FieldByName('AnexosQtde').AsInteger);
        Result.setDtCadastro(FDQuery.FieldByName('DtCadastro').AsDateTime);
        Result.setDtAtualizacao(FDQuery.FieldByName('DtAtualizacao').AsDateTime);
      end;
      FDQuery.Close;
    finally
      FDQuery.Free;
    end;
  except
    on E: Exception do
    begin
      FreeAndNil(Result);
      raise Exception.Create('Erro ao procurar OS: ' + E.Message);
    end;
  end;
end;

procedure TOSPostgreSQL.Deletar(OS: TOS);
var
  FDQuery: TFDQuery;
begin
  FDQuery := CreateFDQuery;
  try
    try
      FDQuery.SQL.Text := 'DELETE FROM public."OS" WHERE "Id" = :Id';
      FDQuery.ParamByName('Id').AsInteger := OS.getId;
      DMConexao.Conexao.StartTransaction;
      try
        FDQuery.ExecSQL;
        DMConexao.Conexao.Commit;
      except
        on E: Exception do
        begin
          DMConexao.Conexao.Rollback;
          raise Exception.CreateFmt('Erro ao deletar OS: %s', [E.Message]);
        end;
      end;
    finally
      FDQuery.Free;
    end;
  except
    on E: Exception do
      raise;
  end;
end;

function TOSPostgreSQL.ProcurarTodos(Filtro: TFiltro; OrdenarPor: Integer): TList;
var
  FDQuery: TFDQuery;
  OS: TOS;
  SQL: string;
  Condicoes: TStringList;
  I: Integer;
begin
  Result := TList.Create;
  FDQuery := CreateFDQuery;
  try
    try
      Condicoes := TStringList.Create;
      try
        SQL := 'SELECT o.*, c."Nome" AS cliente_nome, t."Nome" AS tecnico_nome, ' +
               's."Descricao" AS status_descricao, p."Descricao" AS prioridade_descricao, ' +
               'm."Descricao" AS motivo_cancelamento_descricao ' +
               'FROM public."OS" o ' +
               'INNER JOIN public."Cliente" c ON o."ClienteId" = c."Id" ' +
               'LEFT JOIN public."Tecnico" t ON o."TecnicoResponsavelId" = t."Id" ' +
               'INNER JOIN public."StatusOS" s ON o."StatusId" = s."Id" ' +
               'INNER JOIN public."Prioridadeos" p ON o."PrioridadeId" = p."Id" ' +
               'LEFT JOIN public."MotivoCancelamento" m ON o."MotivoCancelamentoId" = m."Id"';
        if Assigned(Filtro) then
        begin
          if Filtro.getDescricao <> '' then
          begin
            case OrdenarPor of
              0: Condicoes.Add('o."Numero" ILIKE :Descricao');
              1: Condicoes.Add('o."Id" = :Descricao');
              2: Condicoes.Add('o."Titulo" ILIKE :Descricao');
            end;
          end;
          if Condicoes.Count > 0 then
            SQL := SQL + ' WHERE ' + Condicoes.DelimitedText;
        end;

        case OrdenarPor of
          0: SQL := SQL + ' ORDER BY o."Numero"';
          1: SQL := SQL + ' ORDER BY o."Id" DESC';
          2: SQL := SQL + ' ORDER BY o."Titulo"';
        end;

        FDQuery.SQL.Text := SQL;
        if Assigned(Filtro) then
        begin
          if Filtro.getDescricao <> '' then
          begin
            if OrdenarPor in [0, 2] then
              FDQuery.ParamByName('Descricao').AsString := '%' + Filtro.getDescricao + '%'
            else
              FDQuery.ParamByName('Descricao').AsString := Filtro.getDescricao;
          end;
        end;
        FDQuery.Open;

        while not FDQuery.Eof do
        begin
          OS := TOS.Create;
          OS.setId(FDQuery.FieldByName('Id').AsInteger);
          OS.setNumero(FDQuery.FieldByName('Numero').AsString);
          OS.getCliente.setId(FDQuery.FieldByName('ClienteId').AsInteger);
          (OS.getCliente as TCliente).setNome(FDQuery.FieldByName('cliente_nome').AsString);
          if not FDQuery.FieldByName('TecnicoResponsavelId').IsNull then
          begin
            OS.getTecnicoResponsavel.setId(FDQuery.FieldByName('TecnicoResponsavelId').AsInteger);
            (OS.getTecnicoResponsavel as TTecnico).setNome(FDQuery.FieldByName('tecnico_nome').AsString);
          end;
          OS.setTitulo(FDQuery.FieldByName('Titulo').AsString);
          OS.setDescricaoProblema(FDQuery.FieldByName('DescricaoProblema').AsString);
          OS.setDiagnostico(FDQuery.FieldByName('Diagnostico').AsString);
          OS.setSolucaoAplicada(FDQuery.FieldByName('SolucaoAplicada').AsString);
          OS.getStatus.setId(FDQuery.FieldByName('StatusId').AsInteger);
          (OS.getStatus as TStatusOS).setDescricao(FDQuery.FieldByName('status_descricao').AsString);
          OS.getPrioridade.setId(FDQuery.FieldByName('PrioridadeId').AsInteger);
          (OS.getPrioridade as TPrioridadeOS).setDescricao(FDQuery.FieldByName('prioridade_descricao').AsString);
          OS.setOrigem(FDQuery.FieldByName('Origem').AsString);
          OS.setDtAbertura(FDQuery.FieldByName('DtAbertura').AsDateTime);
          if not FDQuery.FieldByName('DtPrevistaConclusao').IsNull then
            OS.setDtPrevisaoConclusao(FDQuery.FieldByName('DtPrevistaConclusao').AsDateTime);
          if not FDQuery.FieldByName('DtInicioExecucao').IsNull then
            OS.setDtInicioExecucao(FDQuery.FieldByName('DtInicioExecucao').AsDateTime);
          if not FDQuery.FieldByName('DtConclusao').IsNull then
            OS.setDtConclusao(FDQuery.FieldByName('DtConclusao').AsDateTime);
          if not FDQuery.FieldByName('MotivoCancelamentoId').IsNull then
          begin
            OS.getMotivoCancelamento.setId(FDQuery.FieldByName('MotivoCancelamentoId').AsInteger);
            (OS.getMotivoCancelamento as TMotivoCancelamento).setDescricao(FDQuery.FieldByName('motivo_cancelamento_descricao').AsString);
          end;
          OS.setEnderecoExecucao(FDQuery.FieldByName('EnderecoExecucao').AsString);
          OS.setValorDesconto(FDQuery.FieldByName('ValorDesconto').AsFloat);
          OS.setValorAcrescimo(FDQuery.FieldByName('ValorAcrescimo').AsFloat);
          OS.setFormaPagamento(FDQuery.FieldByName('FormaPagamento').AsString);
          OS.setObservacoes(FDQuery.FieldByName('Observacoes').AsString);
          OS.setUsuarioAbertura(FDQuery.FieldByName('UsuarioAbertura').AsString);
          OS.setUsuarioUltimaAtualizacao(FDQuery.FieldByName('UsuarioUltimaAtualizacao').AsString);
          OS.setAnexosQtde(FDQuery.FieldByName('AnexosQtde').AsInteger);
          OS.setDtCadastro(FDQuery.FieldByName('DtCadastro').AsDateTime);
          OS.setDtAtualizacao(FDQuery.FieldByName('DtAtualizacao').AsDateTime);
          Result.Add(OS);
          FDQuery.Next;
        end;
        FDQuery.Close;
      finally
        Condicoes.Free;
      end;
    finally
      FDQuery.Free;
    end;
  except
    on E: Exception do
    begin
      for I := 0 to Result.Count - 1 do
        TOS(Result[I]).Free;
      Result.Free;
      raise Exception.Create('Erro ao recuperar todas as OS: ' + E.Message);
    end;
  end;
end;

end.
