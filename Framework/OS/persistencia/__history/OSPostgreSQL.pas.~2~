unit OSPostgreSQL;

interface

uses
  OrObject, OSDB, Filtro, Constantes, SysUtils, Vcl.Dialogs, Classes;

type
  TOSPostgreSQL = class(TInterfacedObject, IOSDB)
    constructor Create;
    destructor Destroy; override;
    private
      objeto: TOrObject;
      lista: TOrObject;
      procedure armazenar;
      procedure setAtributos(objeto: TOrObject);
      procedure recuperar(filtro: TFiltro; index: integer);
    public
      procedure setObjeto(objeto: TOrObject);
      function getObjeto: TOrObject;
      function getLista: TOrObject;
      procedure novaInstancia;
      function temDados: boolean;
      procedure incluir;
      procedure alterar;
      procedure excluir(pos: integer = POS_NAO_ENCONTRADA);
      procedure clone(objeto: TOrObject);
      function encontrar(id: integer = NULL_INTEGER): boolean;
      procedure recuperarTodos(filtro: TFiltro; index: integer);
  end;

implementation

uses
  OS, Cliente, Tecnico, StatusOS, PrioridadeOS, MotivoCancelamento, OrList,
  DataModule, ZDbcIntfs, ZAbstractRODataset, ZAbstractDataset, ZDataset;

{ TOSPostgreSQL }

constructor TOSPostgreSQL.Create;
begin
  novaInstancia;
  lista := TOrList.Create;
end;

destructor TOSPostgreSQL.Destroy;
begin
  objeto.Free;
  lista.Free;
  inherited;
end;

procedure TOSPostgreSQL.novaInstancia;
begin
  objeto := TOS.Create;
end;

function TOSPostgreSQL.getObjeto: TOrObject;
begin
  result := objeto;
end;

function TOSPostgreSQL.getLista: TOrObject;
begin
  result := lista;
end;

procedure TOSPostgreSQL.setObjeto(objeto: TOrObject);
begin
  self.objeto := objeto;
end;

function TOSPostgreSQL.temDados: boolean;
begin
  result := (getLista As TOrList).contar > 0;
end;

procedure TOSPostgreSQL.armazenar;
begin
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    dtmData.getConexao.startTransaction;
    try
      with objeto As TOS do
      begin
        if (getId <> NULL_INTEGER) then
          ParamByName('id').AsInteger := getId;
        ParamByName('numero').AsString := getNumero;
        ParamByName('cliente_id').AsInteger := getCliente.getId;
        if Assigned(getTecnicoResponsavel) then
          ParamByName('tecnico_responsavel_id').AsInteger := getTecnicoResponsavel.getId
        else
          ParamByName('tecnico_responsavel_id').Clear;
        ParamByName('titulo').AsString := getTitulo;
        ParamByName('descricao_problema').AsString := getDescricaoProblema;
        ParamByName('diagnostico').AsString := getDiagnostico;
        ParamByName('solucao_aplicada').AsString := getSolucaoAplicada;
        ParamByName('status_id').AsInteger := getStatus.getId;
        ParamByName('prioridade_id').AsInteger := getPrioridade.getId;
        ParamByName('origem').AsString := getOrigem;
        ParamByName('dt_abertura').AsDateTime := getDtAbertura;
        if getDtPrevisaoConclusao <> 0 then
          ParamByName('dt_prevista_conclusao').AsDateTime := getDtPrevisaoConclusao
        else
          ParamByName('dt_prevista_conclusao').Clear;
        if getDtInicioExecucao <> 0 then
          ParamByName('dt_inicio_execucao').AsDateTime := getDtInicioExecucao
        else
          ParamByName('dt_inicio_execucao').Clear;
        if getDtConclusao <> 0 then
          ParamByName('dt_conclusao').AsDateTime := getDtConclusao
        else
          ParamByName('dt_conclusao').Clear;
        if Assigned(getMotivoCancelamento) then
          ParamByName('motivo_cancelamento_id').AsInteger := getMotivoCancelamento.getId
        else
          ParamByName('motivo_cancelamento_id').Clear;
        ParamByName('endereco_execucao').AsString := getEnderecoExecucao;
        ParamByName('valor_desconto').AsFloat := getValorDesconto;
        ParamByName('valor_acrescimo').AsFloat := getValorAcrescimo;
        ParamByName('forma_pagamento').AsString := getFormaPagamento;
        ParamByName('observacoes').AsString := getObservacoes;
        ParamByName('usuario_abertura').AsString := getUsuarioAbertura;
        ParamByName('usuario_ultima_atualizacao').AsString := getUsuarioUltimaAtualizacao;
        ParamByName('anexos_qtde').AsInteger := getAnexosQtde;
        ParamByName('dt_cadastro').AsDateTime := getDtCadastro;
        ParamByName('dt_atualizacao').AsDateTime := getDtAtualizacao;
      end;
      ExecSQL;
      dtmData.getConexao.commit;
      Close;
    except
      on E: Exception do
      begin
        dtmData.getConexao.rollback;
        Close;
        raise Exception.CreateFmt('Esse Registro não pode ser Alterado: %s', [E.Message]);
      end;
    end;
  end;
end;

procedure TOSPostgreSQL.incluir;
begin
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    SQL.Clear;
    SQL.Add('INSERT INTO "OS" (');
    SQL.Add('  "Numero", "ClienteId", "TecnicoResponsavelId", "Titulo",');
    SQL.Add('  "DescricaoProblema", "Diagnostico", "SolucaoAplicada",');
    SQL.Add('  "StatusId", "PrioridadeId", "Origem", "DtAbertura",');
    SQL.Add('  "DtPrevistaConclusao", "DtInicioExecucao", "DtConclusao",');
    SQL.Add('  "MotivoCancelamentoId", "EnderecoExecucao", "ValorDesconto",');
    SQL.Add('  "ValorAcrescimo", "FormaPagamento", "Observacoes",');
    SQL.Add('  "UsuarioAbertura", "UsuarioUltimaAtualizacao", "AnexosQtde",');
    SQL.Add('  "DtCadastro", "DtAtualizacao")');
    SQL.Add('VALUES (');
    SQL.Add('  :numero, :cliente_id, :tecnico_responsavel_id, :titulo,');
    SQL.Add('  :descricao_problema, :diagnostico, :solucao_aplicada,');
    SQL.Add('  :status_id, :prioridade_id, :origem, :dt_abertura,');
    SQL.Add('  :dt_prevista_conclusao, :dt_inicio_execucao, :dt_conclusao,');
    SQL.Add('  :motivo_cancelamento_id, :endereco_execucao, :valor_desconto,');
    SQL.Add('  :valor_acrescimo, :forma_pagamento, :observacoes,');
    SQL.Add('  :usuario_abertura, :usuario_ultima_atualizacao, :anexos_qtde,');
    SQL.Add('  :dt_cadastro, :dt_atualizacao)');
    armazenar;
  end;
end;

procedure TOSPostgreSQL.alterar;
begin
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    SQL.Clear;
    SQL.Add('UPDATE "OS" SET');
    SQL.Add('  "Numero" = :numero,');
    SQL.Add('  "ClienteId" = :cliente_id,');
    SQL.Add('  "TecnicoResponsavelId" = :tecnico_responsavel_id,');
    SQL.Add('  "Titulo" = :titulo,');
    SQL.Add('  "DescricaoProblema" = :descricao_problema,');
    SQL.Add('  "Diagnostico" = :diagnostico,');
    SQL.Add('  "SolucaoAplicada" = :solucao_aplicada,');
    SQL.Add('  "StatusId" = :status_id,');
    SQL.Add('  "PrioridadeId" = :prioridade_id,');
    SQL.Add('  "Origem" = :origem,');
    SQL.Add('  "DtAbertura" = :dt_abertura,');
    SQL.Add('  "DtPrevistaConclusao" = :dt_prevista_conclusao,');
    SQL.Add('  "DtInicioExecucao" = :dt_inicio_execucao,');
    SQL.Add('  "DtConclusao" = :dt_conclusao,');
    SQL.Add('  "MotivoCancelamentoId" = :motivo_cancelamento_id,');
    SQL.Add('  "EnderecoExecucao" = :endereco_execucao,');
    SQL.Add('  "ValorDesconto" = :valor_desconto,');
    SQL.Add('  "ValorAcrescimo" = :valor_acrescimo,');
    SQL.Add('  "FormaPagamento" = :forma_pagamento,');
    SQL.Add('  "Observacoes" = :observacoes,');
    SQL.Add('  "UsuarioAbertura" = :usuario_abertura,');
    SQL.Add('  "UsuarioUltimaAtualizacao" = :usuario_ultima_atualizacao,');
    SQL.Add('  "AnexosQtde" = :anexos_qtde,');
    SQL.Add('  "DtCadastro" = :dt_cadastro,');
    SQL.Add('  "DtAtualizacao" = :dt_atualizacao');
    SQL.Add('WHERE "Id" = :id');
    armazenar;
  end;
end;

procedure TOSPostgreSQL.excluir(pos: integer);
begin
  getObjeto.setId((getLista As TOrList).item(pos).getId);
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    SQL.Clear;
    SQL.Add('DELETE FROM "OS"');
    SQL.Add('WHERE "Id" = :id');
    dtmData.getConexao.startTransaction;
    try
      ParamByName('id').AsInteger := objeto.getId;
      ExecSQL;
      dtmData.getConexao.commit;
      Close;
    except
      on E: Exception do
      begin
        dtmData.getConexao.rollback;
        Close;
        raise Exception.CreateFmt('Esse Registro não pode ser Excluido: %s', [E.Message]);
      end;
    end;
  end;
end;

procedure TOSPostgreSQL.clone(objeto: TOrObject);
begin
  if encontrar((objeto As TOS).getId) then
  begin
    getObjeto.setId(NULL_INTEGER);
    incluir;
  end;
end;

function TOSPostgreSQL.encontrar(id: integer): boolean;
begin
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    SQL.Clear;
    SQL.Add('SELECT o."Id", o."Numero", o."ClienteId", c."Nome" AS cliente_nome,');
    SQL.Add('       o."TecnicoResponsavelId", t."Nome" AS tecnico_nome,');
    SQL.Add('       o."Titulo", o."DescricaoProblema", o."Diagnostico",');
    SQL.Add('       o."SolucaoAplicada", o."StatusId", s."Descricao" AS status_descricao,');
    SQL.Add('       o."PrioridadeId", p."Descricao" AS prioridade_descricao,');
    SQL.Add('       o."Origem", o."DtAbertura", o."DtPrevistaConclusao",');
    SQL.Add('       o."DtInicioExecucao", o."DtConclusao", o."MotivoCancelamentoId",');
    SQL.Add('       m."Descricao" AS motivo_cancelamento_descricao,');
    SQL.Add('       o."EnderecoExecucao", o."ValorDesconto", o."ValorAcrescimo",');
    SQL.Add('       o."FormaPagamento", o."Observacoes", o."UsuarioAbertura",');
    SQL.Add('       o."UsuarioUltimaAtualizacao", o."AnexosQtde", o."DtCadastro",');
    SQL.Add('       o."DtAtualizacao"');
    SQL.Add('FROM "OS" o');
    SQL.Add('INNER JOIN "Cliente" c ON o."ClienteId" = c."Id"');
    SQL.Add('LEFT JOIN "Tecnico" t ON o."TecnicoResponsavelId" = t."Id"');
    SQL.Add('INNER JOIN "StatusOS" s ON o."StatusId" = s."Id"');
    SQL.Add('INNER JOIN "Prioridadeos" p ON o."PrioridadeId" = p."Id"');
    SQL.Add('LEFT JOIN "MotivoCancelamento" m ON o."MotivoCancelamentoId" = m."Id"');
    SQL.Add('WHERE o."Id" = :id');
    dtmData.getConexao.startTransaction;
    try
      ParamByName('id').AsInteger := id;
      Open;
      result := not Eof;
      if result then
        setAtributos(getObjeto);
    finally
      dtmData.getConexao.commit;
      Close;
    end;
  end;
end;

procedure TOSPostgreSQL.recuperar(filtro: TFiltro; index: integer);
var
  objeto: TOrObject;
begin
  lista := TOrList.Create;
  with dtmData.getConexao.getComandoSQL as TZQuery do
  begin
    SQL.Clear;
    SQL.Add('SELECT o."Id", o."Numero", o."ClienteId", c."Nome" AS cliente_nome,');
    SQL.Add('       o."TecnicoResponsavelId", t."Nome" AS tecnico_nome,');
    SQL.Add('       o."Titulo", o."DescricaoProblema", o."Diagnostico",');
    SQL.Add('       o."SolucaoAplicada", o."StatusId", s."Descricao" AS status_descricao,');
    SQL.Add('       o."PrioridadeId", p."Descricao" AS prioridade_descricao,');
    SQL.Add('       o."Origem", o."DtAbertura", o."DtPrevistaConclusao",');
    SQL.Add('       o."DtInicioExecucao", o."DtConclusao", o."MotivoCancelamentoId",');
    SQL.Add('       m."Descricao" AS motivo_cancelamento_descricao,');
    SQL.Add('       o."EnderecoExecucao", o."ValorDesconto", o."ValorAcrescimo",');
    SQL.Add('       o."FormaPagamento", o."Observacoes", o."UsuarioAbertura",');
    SQL.Add('       o."UsuarioUltimaAtualizacao", o."AnexosQtde", o."DtCadastro",');
    SQL.Add('       o."DtAtualizacao"');
    SQL.Add('FROM "OS" o');
    SQL.Add('INNER JOIN "Cliente" c ON o."ClienteId" = c."Id"');
    SQL.Add('LEFT JOIN "Tecnico" t ON o."TecnicoResponsavelId" = t."Id"');
    SQL.Add('INNER JOIN "StatusOS" s ON o."StatusId" = s."Id"');
    SQL.Add('INNER JOIN "Prioridadeos" p ON o."PrioridadeId" = p."Id"');
    SQL.Add('LEFT JOIN "MotivoCancelamento" m ON o."MotivoCancelamentoId" = m."Id"');
    SQL.Add('WHERE 1=1');

    if (filtro.getDescricao <> NULL_STRING) then
    begin
      case index of
        0: SQL.Add(' AND o."Numero" ILIKE :filtro');
        1: SQL.Add(' AND o."Id" = :filtro');
        2: SQL.Add(' AND o."Titulo" ILIKE :filtro');
      end;
    end;

    if filtro.getOrdernarPor = 0 then
      SQL.Add('ORDER BY o."Id" DESC')
    else
      SQL.Add('ORDER BY o."Numero"');

    dtmData.getConexao.startTransaction;
    try
      if (filtro.getDescricao <> NULL_STRING) then
      begin
        if index in [0, 2] then
          ParamByName('filtro').AsString := filtro.getDescricao + '%'
        else
          ParamByName('filtro').AsString := filtro.getDescricao;
      end;
      Open;
      while not Eof do
      begin
        objeto := TOS.Create;
        setAtributos(objeto);
        (lista as TOrList).addNoSearch(objeto);
        Next;
      end;
    finally
      dtmData.getConexao.commit;
      Close;
    end;
  end;
end;

procedure TOSPostgreSQL.recuperarTodos(filtro: TFiltro; index: integer);
begin
  recuperar(filtro, index);
end;

procedure TOSPostgreSQL.setAtributos(objeto: TOrObject);
begin
  with dtmData.getConexao.getComandoSQL As TZQuery do
  begin
    with objeto As TOS do
    begin
      setId(FieldByName('Id').AsInteger);
      setNumero(FieldByName('Numero').AsString);
      getCliente.setId(FieldByName('ClienteId').AsInteger);
      (getCliente As TCliente).setNome(FieldByName('cliente_nome').AsString);
      if not FieldByName('TecnicoResponsavelId').IsNull then
      begin
        getTecnicoResponsavel.setId(FieldByName('TecnicoResponsavelId').AsInteger);
        (getTecnicoResponsavel As TTecnico).setNome(FieldByName('tecnico_nome').AsString);
      end;
      setTitulo(FieldByName('Titulo').AsString);
      setDescricaoProblema(FieldByName('DescricaoProblema').AsString);
      setDiagnostico(FieldByName('Diagnostico').AsString);
      setSolucaoAplicada(FieldByName('SolucaoAplicada').AsString);
      getStatus.setId(FieldByName('StatusId').AsInteger);
      (getStatus As TStatusOS).setDescricao(FieldByName('status_descricao').AsString);
      getPrioridade.setId(FieldByName('PrioridadeId').AsInteger);
      (getPrioridade As TPrioridadeOS).setDescricao(FieldByName('prioridade_descricao').AsString);
      setOrigem(FieldByName('Origem').AsString);
      setDtAbertura(FieldByName('DtAbertura').AsDateTime);
      if not FieldByName('DtPrevistaConclusao').IsNull then
        setDtPrevisaoConclusao(FieldByName('DtPrevistaConclusao').AsDateTime);
      if not FieldByName('DtInicioExecucao').IsNull then
        setDtInicioExecucao(FieldByName('DtInicioExecucao').AsDateTime);
      if not FieldByName('DtConclusao').IsNull then
        setDtConclusao(FieldByName('DtConclusao').AsDateTime);
      if not FieldByName('MotivoCancelamentoId').IsNull then
      begin
        getMotivoCancelamento.setId(FieldByName('MotivoCancelamentoId').AsInteger);
        (getMotivoCancelamento As TMotivoCancelamento).setDescricao(FieldByName('motivo_cancelamento_descricao').AsString);
      end;
      setEnderecoExecucao(FieldByName('EnderecoExecucao').AsString);
      setValorDesconto(FieldByName('ValorDesconto').AsFloat);
      setValorAcrescimo(FieldByName('ValorAcrescimo').AsFloat);
      setFormaPagamento(FieldByName('FormaPagamento').AsString);
      setObservacoes(FieldByName('Observacoes').AsString);
      setUsuarioAbertura(FieldByName('UsuarioAbertura').AsString);
      setUsuarioUltimaAtualizacao(FieldByName('UsuarioUltimaAtualizacao').AsString);
      setAnexosQtde(FieldByName('AnexosQtde').AsInteger);
      setDtCadastro(FieldByName('DtCadastro').AsDateTime);
      setDtAtualizacao(FieldByName('DtAtualizacao').AsDateTime);
    end;
  end;
end;

end.
